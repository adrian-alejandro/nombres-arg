name: Publish Python Package

on:
  push:
    tags:
      - "v*"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest
          pip install -e .

      - name: Run Tests
        run: pytest tests/

  deploy:
    name: Deploy to PyPI
    needs: test  # Only runs if tests pass
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Extract Version from Tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Inject Version into Files
        run: |
          sed -i "s/version = .*/version = \"$VERSION\"/" pyproject.toml
          sed -i "s/version = .*/version = $VERSION/" setup.cfg
          sed -i "s/version=.*/version=\"$VERSION\",/" setup.py
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git checkout main
          git pull origin main
          git commit -am "Set version to $VERSION"
          git push origin main

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install build twine

      - name: Build Package
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: python -m twine upload dist/*
